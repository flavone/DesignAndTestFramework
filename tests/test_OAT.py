# encoding: utf-8
from framework.orthogonal_experiment.OAT import *
import json

if __name__ == "__main__":
    oat = OAT()

    case1 = OrderedDict(
        [
            # ('还款期', ['放款当天', '前几期', '最后一期']),  # 根据放款计划查看是否当前为最后一期  1
            # ('还款日', ['未到', '当日', '已过']),  # 根据放款时间查看是否为当日，当期是否已还 2
            ('放款日与还款日', ['放款当天-当日还款', '放款当天-次日还款', '放款中期-当日还款', '放款中期-提前还款', '放款中期-推迟还款', '放款最后期-当日还款', '放款最后期-提前还款',
                         '放款最后期-推迟还款']),
            ('余额', ['充足', '不足']),  # 查询虚拟账户 3
            ('输入金额', ['少于当期应还', '等于当期应还', '大于当期应还']),  # 输入
            ('还款方式', ['余额还款', '支付宝']),  # 选择参数
            ('还款类型', ['先息后本', '等额本息']),  # 查询还款类型 4
            ('贷款类型', ['授信贷款', '上门贷款无宽限', '上门贷款有宽限，宽限内提前还', '上门贷款有宽限，宽限外提前还']),  # 查询放款类型 5
            ('连续还款', ['单次还款', '当天连续还款', '累日连续还款']),  # 选择是否循环
        ]
    )
    case2 = OrderedDict(
        [
            ('放款日与还款日', ['放款当天-当日还款', '放款当天-次日还款', '放款中期-当日还款', '放款中期-提前还款', '放款中期-推迟还款', '放款最后期-当日还款', '放款最后期-提前还款',
                         '放款最后期-推迟还款']),
            ('余额', ['充足', '不足', '充足', '不足', '充足', '不足', '充足', '不足']),  # 查询虚拟账户 3
            ('输入金额', ['少于当期应还', '等于当期应还', '大于当期应还', '少于当期应还', '等于当期应还', '大于当期应还', '少于当期应还', '等于当期应还']),  # 输入
            ('还款方式', ['余额还款', '支付宝', '余额还款', '支付宝', '余额还款', '支付宝', '余额还款', '支付宝']),  # 选择参数
            ('还款类型', ['先息后本', '等额本息', '先息后本', '等额本息', '先息后本', '等额本息', '先息后本', '等额本息']),  # 查询还款类型 4
            ('贷款类型', ['授信贷款', '上门贷款无宽限', '上门贷款有宽限，宽限内提前还', '上门贷款有宽限，宽限外提前还', '授信贷款', '上门贷款无宽限', '上门贷款有宽限，宽限内提前还',
                      '上门贷款有宽限，宽限外提前还']),  # 查询放款类型 5
            ('连续还款', ['单次还款', '当天连续还款', '累日连续还款', '单次还款', '当天连续还款', '累日连续还款', '单次还款', '当天连续还款']),  # 选择是否循环
        ]
    )
    n = 1
    for k in case1.items():
        print(k)
        n *= len(k[1])
    print('Combined Case Count: %d' % n)
    s = oat.genSets(case1, fill=1)
    print('Orthogonal Case Count: %d' % len(s))
    for v in s:
        print(json.dumps(v, ensure_ascii=False))
